buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/groups/public' }
  }
  dependencies {
    classpath 'com.github.townsfolk:gradle-release:1.2'
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}

apply plugin: 'release'

allprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  
  // UTF-8 should be standard by now. So use it!
  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
  
  sourceCompatibility = 1.7
  targetCompatibility = 1.7
  
  group = 'com.squarespace.jersey2-guice'
  
  repositories {
    mavenCentral()
    mavenLocal()
  }
  
  configurations {
    provided
  }
  
  // Telling Eclipse about the provided scope
  eclipse.classpath.plusConfigurations += [configurations.provided]

  sourceSets {
    main { 
      compileClasspath += [configurations.provided]
    }
    
    test { 
      compileClasspath += [configurations.provided]
      runtimeClasspath += [configurations.provided]
    }
    
    // Telling IDEA about the provided scope
    idea {
      module {
        scopes.PROVIDED.plus += [configurations.provided]
      }
    }
  }
  
  project.ext {
    guice = System.getProperty('guice', '4.0-beta4')
    jersey = System.getProperty('jersey', '2.11')
    
    isReleaseVersion = !version.endsWith('-SNAPSHOT')
  }
  
  task integrationTest(type: Test) {
    useTestNG()
    
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    
    include '**/*IT.*'
    exclude '**/*Test.*'
  
    // fork a new java process every 10 test classes
    forkEvery = 10
  }
    
  test {
    useTestNG()
    
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
      
    exclude '**/*IT.*'
    include '**/*Test.*'
  }
  
  dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile "com.google.inject.extensions:guice-servlet:${project.guice}"
    
    compile ("org.glassfish.jersey.containers:jersey-container-servlet-core:${project.jersey}") {
      // Use Guice's javax.inject module
      exclude group: 'org.glassfish.hk2.external', module: 'javax.inject'
    }
    
    provided 'javax.servlet:javax.servlet-api:3.1.0'
    
    testCompile 'org.eclipse.jetty:jetty-servlet:9.2.0.v20140526'
    testCompile 'org.testng:testng:6.8.8'
  }
  
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
  
  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }
  
  artifacts {
    archives sourcesJar 
    archives javadocJar
  }
  
  javadoc {
    classpath += configurations.provided
    
    options.links('http://docs.oracle.com/javase/7/docs/api/', 
      'http://docs.oracle.com/javaee/7/api/',
      'http://google-guice.googlecode.com/git/javadoc/',
      'https://hk2.java.net/2.3.0-b10/apidocs/')
  }
  
  signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
  }
  
  task uploadSquarespace(type: Upload) {
    configuration = configurations.archives
    
    repositories {
      mavenDeployer {
        repository(url: System.properties['RELEASE_REPOSITORY_URL'])
        snapshotRepository(url: System.properties['SNAPSHOT_REPOSITORY_URL'])
      }
    }
  }
  
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: System.properties['MAVEN_CENTRAL_USERNAME'], 
            password: System.properties['MAVEN_CENTRAL_PASSWORD'])
        }
  
        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
          authentication(userName: System.properties['MAVEN_CENTRAL_USERNAME'], 
            password: System.properties['MAVEN_CENTRAL_PASSWORD'])
        }
        
        pom.project {
          name 'Jersey 2.0 w/ Guice'
          packaging 'jar'
          description 'This library adds support for Jersey 2.0 w/ Guice'
          url 'https://github.com/Squarespace/jersey2-guice'
  
          scm {
            connection 'scm:git:https://github.com/Squarespace/jersey2-guice.git'
            developerConnection 'scm:git:https://github.com/Squarespace/jersey2-guice.git'
            url 'https://github.com/Squarespace/jersey2-guice'
          }
  
          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
  
          developers {
            developer {
              id 'Squarespace, Inc.'
              url 'http://www.squarespace.com'
            }
          }
        }
      }
    }
  }
}

createReleaseTag.dependsOn ':uploadArchives', ':uploadSquarespace'